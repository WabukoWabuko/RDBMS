{"version":3,"file":"static/js/933.cb021db3.chunk.js","mappings":"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","sources":["data/rdbmsData.js"],"sourcesContent":["const rdbmsData = [\n  {\n    title: \"SELECT\",\n    description: \"Retrieves data from one or more tables\",\n    example: `SELECT column1, column2 FROM table_name WHERE condition;`,\n    tags: [\"query\", \"read\", \"basic\"]\n  },\n  {\n    title: \"INSERT\",\n    description: \"Adds new data to a table\",\n    example: `INSERT INTO table_name (column1, column2) VALUES (value1, value2);`,\n    tags: [\"create\", \"write\"]\n  },\n  {\n    title: \"UPDATE\",\n    description: \"Modifies existing data in a table\",\n    example: `UPDATE table_name SET column1 = value1 WHERE condition;`,\n    tags: [\"update\", \"modify\"]\n  },\n  {\n    title: \"DELETE\",\n    description: \"Removes data from a table\",\n    example: `DELETE FROM table_name WHERE condition;`,\n    tags: [\"delete\", \"remove\"]\n  },\n  {\n    title: \"INNER JOIN\",\n    description: \"Returns rows from both tables where the join condition is met\",\n    example: `SELECT * FROM table1 INNER JOIN table2 ON table1.id = table2.fk_id;`,\n    tags: [\"join\", \"combine\", \"relational\"]\n  },\n  {\n    title: \"LEFT JOIN\",\n    description: \"Returns all rows from the left table and matching rows from the right table, or NULL if no match\",\n    example: `SELECT * FROM table1 LEFT JOIN table2 ON table1.column = table2.column;`,\n    tags: [\"join\", \"left\", \"relational\"]\n  },\n  {\n    title: \"RIGHT JOIN\",\n    description: \"Returns all rows from the right table and matching rows from the left table, or NULL if no match\",\n    example: `SELECT * FROM table1 RIGHT JOIN table2 ON table1.column = table2.column;`,\n    tags: [\"join\", \"right\", \"relational\"]\n  },\n  {\n    title: \"FULL OUTER JOIN\",\n    description: \"Returns all rows from both tables, with NULLs for non-matching rows\",\n    example: `SELECT * FROM table1 FULL OUTER JOIN table2 ON table1.column = table2.column;`,\n    tags: [\"join\", \"full\", \"relational\"]\n  },\n  {\n    title: \"SELF JOIN\",\n    description: \"Joins a table with itself to find related data\",\n    example: `SELECT e.name AS employee, m.name AS manager FROM employees e JOIN employees m ON e.manager_id = m.employee_id;`,\n    tags: [\"join\", \"self\", \"relational\"]\n  },\n  {\n    title: \"CROSS JOIN\",\n    description: \"Returns the Cartesian product of two tables (all possible row combinations)\",\n    example: `SELECT * FROM table1 CROSS JOIN table2;`,\n    tags: [\"join\", \"cartesian\", \"relational\"]\n  },\n  {\n    title: \"GROUP BY\",\n    description: \"Groups rows with the same values into summary rows\",\n    example: `SELECT department, COUNT(*) FROM employees GROUP BY department;`,\n    tags: [\"aggregate\", \"group\", \"summarize\"]\n  },\n  {\n    title: \"ORDER BY\",\n    description: \"Sorts the result set in ascending or descending order\",\n    example: `SELECT * FROM employees ORDER BY salary DESC;`,\n    tags: [\"sort\", \"order\"]\n  },\n  {\n    title: \"WHERE\",\n    description: \"Filters records that meet certain conditions\",\n    example: `SELECT * FROM employees WHERE salary > 50000;`,\n    tags: [\"filter\", \"condition\"]\n  },\n  {\n    title: \"HAVING\",\n    description: \"Filters grouped data based on a condition\",\n    example: `SELECT department, SUM(salary) AS total FROM employees GROUP BY department HAVING total > 100000;`,\n    tags: [\"filter\", \"group\", \"aggregate\"]\n  },\n  {\n    title: \"LIMIT\",\n    description: \"Limits the number of rows returned in a query result\",\n    example: `SELECT * FROM employees ORDER BY salary DESC LIMIT 10;`,\n    tags: [\"limit\", \"pagination\"]\n  },\n  {\n    title: \"OFFSET\",\n    description: \"Skips a specified number of rows in a query result\",\n    example: `SELECT * FROM employees ORDER BY salary DESC LIMIT 10 OFFSET 5;`,\n    tags: [\"offset\", \"pagination\"]\n  },\n  {\n    title: \"UNION\",\n    description: \"Combines the results of two or more SELECT statements, removing duplicates\",\n    example: `SELECT column1 FROM table1 UNION SELECT column1 FROM table2;`,\n    tags: [\"combine\", \"set\"]\n  },\n  {\n    title: \"UNION ALL\",\n    description: \"Combines the results of two or more SELECT statements, including duplicates\",\n    example: `SELECT column1 FROM table1 UNION ALL SELECT column1 FROM table2;`,\n    tags: [\"combine\", \"set\"]\n  },\n  {\n    title: \"INTERSECT\",\n    description: \"Returns common rows between two SELECT statements\",\n    example: `SELECT column1 FROM table1 INTERSECT SELECT column1 FROM table2;`,\n    tags: [\"set\", \"common\"]\n  },\n  {\n    title: \"EXCEPT\",\n    description: \"Returns rows from the first SELECT statement not present in the second\",\n    example: `SELECT column1 FROM table1 EXCEPT SELECT column1 FROM table2;`,\n    tags: [\"set\", \"difference\"]\n  },\n  {\n    title: \"COUNT\",\n    description: \"Returns the number of rows or non-null values in a column\",\n    example: `SELECT COUNT(*) FROM employees WHERE department = 'IT';`,\n    tags: [\"aggregate\", \"count\"]\n  },\n  {\n    title: \"LIKE\",\n    description: \"Checks if a value matches a pattern using wildcards\",\n    example: `SELECT * FROM employees WHERE name LIKE 'A%';`,\n    tags: [\"filter\", \"pattern\"]\n  },\n  {\n    title: \"CASE\",\n    description: \"Performs conditional logic in a query\",\n    example: `SELECT name, CASE WHEN salary < 50000 THEN 'Low' ELSE 'High' END AS salary_range FROM employees;`,\n    tags: [\"conditional\", \"logic\"]\n  },\n  {\n    title: \"ROW_NUMBER\",\n    description: \"Assigns a unique sequential number to each row\",\n    example: `SELECT ROW_NUMBER() OVER (ORDER BY salary DESC) AS row_num, name, salary FROM employees;`,\n    tags: [\"window\", \"ranking\"]\n  },\n  {\n    title: \"RANK\",\n    description: \"Assigns a rank to each row based on a specified column, with gaps for ties\",\n    example: `SELECT name, salary, RANK() OVER (ORDER BY salary DESC) AS rank FROM employees;`,\n    tags: [\"window\", \"ranking\"]\n  },\n  {\n    title: \"DENSE_RANK\",\n    description: \"Assigns a rank to each row, without gaps for ties\",\n    example: `SELECT name, salary, DENSE_RANK() OVER (ORDER BY salary DESC) AS dense_rank FROM employees;`,\n    tags: [\"window\", \"ranking\"]\n  },\n  {\n    title: \"TRUNCATE\",\n    description: \"Deletes all rows from a table without logging individual deletions\",\n    example: `TRUNCATE TABLE table_name;`,\n    tags: [\"delete\", \"table\"]\n  },\n  {\n    title: \"COMMIT\",\n    description: \"Saves all changes made in the current transaction\",\n    example: `COMMIT;`,\n    tags: [\"transaction\", \"save\"]\n  },\n  {\n    title: \"ROLLBACK\",\n    description: \"Undoes all changes made in the current transaction\",\n    example: `ROLLBACK;`,\n    tags: [\"transaction\", \"undo\"]\n  },\n  {\n    title: \"CREATE TABLE\",\n    description: \"Defines a new table with specified columns and constraints\",\n    example: `CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), salary DECIMAL(10,2));`,\n    tags: [\"table\", \"create\", \"schema\"]\n  },\n  {\n    title: \"ALTER TABLE\",\n    description: \"Modifies an existing table's structure\",\n    example: `ALTER TABLE employees ADD department VARCHAR(50);`,\n    tags: [\"table\", \"modify\", \"schema\"]\n  },\n  {\n    title: \"DROP TABLE\",\n    description: \"Deletes an entire table and its data\",\n    example: `DROP TABLE employees;`,\n    tags: [\"table\", \"delete\", \"schema\"]\n  },\n  {\n    title: \"PRIMARY KEY\",\n    description: \"Ensures unique, non-null values for a column or set of columns\",\n    example: `CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50));`,\n    tags: [\"constraint\", \"unique\", \"schema\"]\n  },\n  {\n    title: \"FOREIGN KEY\",\n    description: \"Establishes a relationship between two tables\",\n    example: `CREATE TABLE orders (order_id INT, employee_id INT, FOREIGN KEY (employee_id) REFERENCES employees(id));`,\n    tags: [\"constraint\", \"relational\", \"schema\"]\n  },\n  {\n    title: \"CHECK CONSTRAINT\",\n    description: \"Ensures data meets a specific condition\",\n    example: `CREATE TABLE employees (id INT, salary DECIMAL(10,2), CONSTRAINT chk_salary CHECK (salary > 0));`,\n    tags: [\"constraint\", \"validation\", \"schema\"]\n  },\n  {\n    title: \"SUBQUERY\",\n    description: \"A query nested within another query\",\n    example: `SELECT name FROM employees WHERE department_id = (SELECT id FROM departments WHERE name = 'IT');`,\n    tags: [\"query\", \"nested\"]\n  },\n  {\n    title: \"EXPLAIN\",\n    description: \"Shows the execution plan of a query for performance analysis\",\n    example: `EXPLAIN SELECT * FROM employees WHERE salary > 50000;`,\n    tags: [\"performance\", \"query\", \"optimization\"]\n  },\n  {\n    title: \"GRANT\",\n    description: \"Assigns permissions to users or roles\",\n    example: `GRANT SELECT, INSERT ON employees TO user_name;`,\n    tags: [\"security\", \"permissions\"]\n  },\n  {\n    title: \"REVOKE\",\n    description: \"Removes permissions from users or roles\",\n    example: `REVOKE SELECT ON employees FROM user_name;`,\n    tags: [\"security\", \"permissions\"]\n  },\n  {\n    title: \"INDEX\",\n    description: \"Creates an index to improve query performance\",\n    example: `CREATE INDEX idx_name ON employees (name);`,\n    tags: [\"performance\", \"index\", \"schema\"]\n  },\n  {\n    title: \"VIEW\",\n    description: \"Creates a virtual table based on a SELECT query\",\n    example: `CREATE VIEW high_earners AS SELECT name, salary FROM employees WHERE salary > 100000;`,\n    tags: [\"virtual\", \"query\", \"schema\"]\n  }\n];\n\nexport default rdbmsData;\n"],"names":["title","description","example","tags"],"sourceRoot":""}